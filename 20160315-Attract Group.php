<?php
/**
 * Тестовое задание для кандидатов на должность PHP-разработчика
 *
 * Файл представляет собой шаблон для выполнения тестового задания. Все объявленные
 * методы должны быть реализованы непосредственно здесь. Создание дополнительных
 * собственных методов допускается.
 *
 * Код должен соответствовать стандартам кодирования PSR (http://www.php-fig.org/psr/)
 * и работать без генерации предупреждений при включенном режиме error_reporting=E_ALL.
 *
 * После выполнения всех задач файл должен быть переименован в следующий формат:
 * <Date>-<LastName>.php
 *
 * Например, 20160309-Ivanov.php
 *
 * ВНИМАНИЕ!
 *     - На выполнение задания вы не должны тратить более двух-трех дней.
 *     - Файл должен содержать только класс.
 *
 * @version   20160309
 */
class AttractGroupCandidate {

    /**
     * Задание 1
     *
     * Из входного массива удалить все элементы, меньшие среднего значения по массиву.
     *
     * Для входного массива:
     * 6, 2, 7, 1, 3, 4, 5
     *
     * Среднее значение равно:
     * 4
     *
     * Следовательно, из входного массива удаляем все значения, которые меньше 4 и получаем:
     * 6, 7, 4, 5
     *
     * @param  array    $list Входной массив
     * @return array          Массив с отфильтрованными значениями
     */
    public function task1($list) {
        //складываем все элементы
        $elem_sum = 0;
        foreach($list as $item)
            $elem_sum += $item;

        //находим среднее
        $average = $elem_sum / count($list);

        //запоняем массив - результат
        $result = array();
        foreach($list as $item)
            if($item >= $average)
                $result[] = $item;

        return $result;
    }


    /**
     * Задание 2
     *
     * Написать функцию, рассчитывающую величину налога. На вход функция принимает величину дохода. Налог начисляется по следующему правилу:
     *
     * - если сумма дохода не превышает 500.00, то налог составляет 5% от нее
     * - если сумма не превышает 750.00, то налог составляет 5% на первые 500.00 и 10% на остаток
     * - если сумма не превышает 1500.00, то с первых 500.00 берем 5%, от 500.00 до 750.00 10% и 12.5% с того, что превышает 750.00
     * - если сумма больше 1500.00, то до 1500.00 начисляем по описанному выше правилу, а со всего, что больше берем 15%
     *
     * Например, если доход равен 680.00, то функция должна вернуть 43.00.
     *
     * @param  float   $income  Величина дохода
     * @return float            Сумма налога
     */
    public function task2($income) {
        //вообще по правильному эти переменные должны быть переменными класса а не метода
        $persents = array(0.15, 0.125, 0.1, 0.05);
        $limits = array(1500, 750, 500, 0);

        $result = 0;

        foreach($limits as $key => $value){
            if($income > $value){
                $result += ($income - $value) * $persents[$key];
                $income -= $income - $value;
            }
        }

        return $result;
    }

    /**
     * Задание 3
     *
     * Элементы, расположенные на главной диагонали квадратной матрицы отсортировать в порядке возрастания.
     *
     * Например, для входной матрицы:
     * 1 2 3 4
     * 5 6 7 8
     * 9 0 3 2
     * 5 2 4 2
     *
     * Должен быть возвращен результат:
     * 1 2 3 4
     * 5 2 7 8
     * 9 0 3 2
     * 5 2 4 6
     *
     * @param  array $matrix  Квадратная матрица
     * @return array          Матрица с отсортированной главной диагональю
     */
    public function task3($matrix) {
        //получаем массив для сортировки
        $arr = array();
        for($i = 0; $i < count($matrix); $i++)
            $arr[] = $matrix[$i][$i];

        //сортируем
        sort($arr);

        //вставляем
        for($i = 0; $i < count($matrix); $i++)
            $matrix[$i][$i] = $arr[$i];

        return $matrix;
    }


    /**
     * Задание 4
     *
     * Сформировать одномерный массив, получающийся при чтении прямоугольной матрицы «змейкой по горизонтали», начиная
     * с верхнего левого элемента матрицы двигаться вправо. По достижении конца ряда «змейка» переходит на следующий и
     * начинает двигаться в обратном направлении.
     *
     * Например, для входной матрицы:
     *  1  2  3  4
     *  5  6  7  8
     *  9 10 11 12
     *
     * Должен быть возвращен результат:
     * 1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12
     *
     * @param  array $matrix  Входная прямоугольная матрица
     * @return array          Одномерный массив
     */
    public function task4($matrix) {
        $result = array();

        $direction = true;
        $i = 0;
        foreach($matrix as $arr){

            while(isset($arr[$i])){
                $result[] = $arr[$i];
                $i = $direction ? ++$i : --$i;
            }

            $direction = !$direction;
            $i = $direction ? ++$i : --$i;
        }

        return $result;
    }
}
?>